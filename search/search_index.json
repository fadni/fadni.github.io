{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>I am Khalid Elbadawi, an assistant professor at the faculty of Mathematical Sciences and Informatics, University of Khartoum.</p>"},{"location":"lectures/lec1/","title":"Lecture 1: Review","text":""},{"location":"lectures/lec1/#overview-of-programming","title":"Overview of Programming","text":"<p>We start this review with a quote from very famous computer scientist:</p> <p>Programming is learned by writing programs</p> <p>Brian Kernighan</p> <p>Indeed! If you want to be professional in programming, then you must spend a lot of (really a lot of) time writing several programs in front of a PC/laptop. Writing codes in a paper is not sufficient. You must sit and type your programs. The purpose is to get familiar with programming environment and give you a feel of how you can get a computer to do things for you.</p> <p>Programming</p> <p>Programming is the activity of writing and testing programs</p> <p>The figure below shows a very basic view of the program development process. Generally, programming involves two activities: writing and testing. After designing your algorithm, you go through the following steps:</p> <ol> <li>Edit your program and save it in a source file,</li> <li>Compile the source file to find any syntax error; if there is one, you return back to Step (1) to fix it. The compiler will emit an error message to guide you on how to fix the error. If the source file has compiled successfully, an executable file would be generated.</li> <li>Prepare a list of test cases to cover all execution paths to examine the logic of your algorithm.</li> <li>Test your program using a test case. If your program outputs unexpected result (i.e., the test case failed), which indicates a logical error, then you need to go back to Step (1).Sometimes, you may need to return back to the very beginning and revise your algorithm.</li> <li>If your program passed all test cases, then you are done.</li> </ol> <pre><code>flowchart LR\n    S1[Edit] --&gt; S2[Compile] --&gt; C1{error?} -- No --&gt; S3[Run a test] --&gt; C2{Pass?} -- Yes --&gt; C3{Another test?} -- No --&gt; F(Done)\n    C1 -- Yes --&gt; S1\n    C2 -- No --&gt; S1\n    C3 -- Yes --&gt; S3</code></pre>"},{"location":"lectures/lec1/#debugging-and-ide","title":"Debugging and IDE","text":"<p>You, as a programmer, must test your program thoroughly, comparing the expected results to those that actually occur. When defects are found, they must be traced back to the source of the problem in the code/algorithm and corrected. The process of finding and correcting defects in a program is called debugging. Logical errors can manifest themselves in many ways, and the actual root cause might be difficult to discover.</p> <p>A software development environment is a set of tools used to create, compile, run, test, and modify a program. Some environments are referred to as integrated development environment (IDE) because they integrate various tools into one software program and provide a convenient graphical user interface (GUI). Most IDEs are shipped with a debugger tool, which helps you to debug your programs. You must be familiar with this tool.</p>"},{"location":"lectures/lec1/#semantics","title":"Semantics","text":"<p>One final remark before proceeding to the next section is that writing and debugging require you to be fully aware of statements\u2019 semantics.</p> <p>Semantics of a statement</p> <p>The semantics of a statement in a programming language define what will happen when that statement is executed</p> <p>Programming languages are generally unambiguous, which means the semantics of a program are well defined. That is, there is one and only one interpretation for each statement. For example:</p> Example<pre><code>    int length ; // define a variable of type int\n    length = 99; // What is the semantics of this statement? (1)\n</code></pre> <ol> <li>Put 99 to the object named <code>length</code>.</li> </ol> <p>Here, as the left\u2013hand operand of the assignment, <code>length</code> means \"the object named <code>length</code>,\" so that the assignment statement is read \"Put 99 into the object named <code>length</code>.\"</p>"},{"location":"lectures/lec1/#c-program-structure","title":"C++ Program Structure","text":"A typical C++ program<pre><code>// this program outputs the message \" Hello World !\" to the monitor\n# include &lt; iostream &gt;\n\nusing namespace std;\n\n// MAIN function\nint main ()\n{\n    cout &lt;&lt; \" Hello World !\" &lt;&lt; endl ;\n\n    return 0;\n}\n</code></pre>"},{"location":"lectures/page1/","title":"Assignment","text":""},{"location":"lectures/page1/#q1","title":"Q1","text":"<p>Compute</p>  \\lim_{x\\to1+} \\frac{1-x^2}{x^2 -2x +1}"},{"location":"lectures/page1/#q2","title":"Q2","text":"<p>Compute f such that </p>  f(t) =  \\begin{cases}     \\frac{\\sqrt{4+t^2} - 2}{t^2} &amp; t=0\\\\     a &amp; t \\neq 0 \\end{cases}"},{"location":"lectures/page1/#q3","title":"Q3","text":"<p>Compute the derivative of </p>  \\frac{\\sin x + x}{2 + \\cos x}"},{"location":"lectures/page1/#lecture-notes","title":"Lecture Notes","text":""},{"location":"lectures/page1/#derivative-formulas","title":"Derivative Formulas","text":"<p>Proof of (u+v)' = u' + v'</p> <p>Start by using the definition of the derivatives</p> \\begin{align*}     (u+v)'(x) &amp;= \\lim_{\\Delta x \\to 0} \\frac{(u+v)(x+\\Delta x) - (u+v)(x)}{\\Delta x} \\\\     &amp;= \\lim_{\\Delta x \\to 0} \\frac{u(x+\\Delta x)+v(x+\\Delta x) - u(x) - v(x)}{\\Delta x} \\\\     &amp;= \\lim_{\\Delta x \\to 0} \\Biggl \\{ \\frac{u(x+\\Delta x) -u(x)}{\\Delta x} + \\frac{v(x+\\Delta x) - v(x)}{\\Delta x} \\Biggr \\} \\\\     &amp;= u'(x) + v'(x)  \\; \\; \\; \\blacksquare \\end{align*} <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>This </p> <p>Lorem ipsum dolo sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>This is highlighted text.</p> <p>{     \"data\": {\"url\": \"https://raw.githubusercontent.com/fadni/data/main/gradesonly.csv\"},     \"mark\": {\"type\":\"bar\", \"tooltip\":true},     \"encoding\": {         \"x\": {             \"field\": \"Letter grade\", \"type\": \"nominal\",              \"sort\": [\"A+\", \"A\", \"B+\", \"B\", \"C\", \"D\", \"F\", \"ABS\"]         },         \"y\": {\"aggregate\": \"count\"},         \"color\": {\"field\": \"Letter grade\"}     } }</p> <p>{   \"description\": \"A simple bar chart with embedded data.\",   \"data\": {     \"values\": [       {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},       {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},       {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}     ]   },   \"mark\": {\"type\": \"bar\", \"tooltip\": true},   \"encoding\": {     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}   } }</p>"}]}