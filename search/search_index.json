{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>I am Khalid Elbadawi, an assistant professor at the faculty of Mathematical Sciences and Informatics, University of Khartoum.</p>"},{"location":"lectures/lec1/","title":"Lecture 1: Review","text":"<p>We start this review with a quote from very famous computer scientist:</p> <p>Programming is learned by writing programs</p> <p>Brian Kernighan</p> <p>Indeed! If you want to be professional in programming, then you must spend a lot of (really a lot of) time writing several programs in front of a PC/laptop. Writing codes in a paper is not sufficient. You must sit and type your programs. The purpose is to get familiar with programming environment and give you a feel of how you can get a computer to do things for you.</p> <p>Programming</p> <p>Programming is the activity of writing and testing programs</p> <p>The figure below shows a very basic view of the program development process. Generally, programming involves two activities: writing and testing. After designing your algorithm, you go through the following steps:</p> <ol> <li>Edit your program and save it in a source file,</li> <li>Compile the source file to find any syntax error; if there is one, you return back to Step (1) to fix it. The compiler will emit an error message to guide you on how to fix the error. If the source file has compiled successfully, an executable file would be generated.</li> <li>Prepare a list of test cases to cover all execution paths to examine the logic of your algorithm.</li> <li>Test your program using a test case. If your program outputs unexpected result (i.e., the test case failed), which indicates a logical error, then you need to go back to Step (1).Sometimes, you may need to return back to the very beginning and revise your algorithm.</li> <li>If your program passed all test cases, then you are done.</li> </ol> <pre><code>flowchart LR\n    S1[Edit] --&gt; S2[Compile] --&gt; C1{error?} -- No --&gt; S3[Run a test] --&gt; C2{Pass?} -- Yes --&gt; C3{Another test?} -- No --&gt; F(Done)\n    C1 -- Yes --&gt; S1\n    C2 -- No --&gt; S1\n    C3 -- Yes --&gt; S3</code></pre>"}]}