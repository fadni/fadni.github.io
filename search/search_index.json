{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>I am Khalid Elbadawi, an assistant professor at the faculty of Mathematical Sciences and Informatics, University of Khartoum.</p>"},{"location":"demo/","title":"Assignment","text":""},{"location":"demo/#q1","title":"Q1","text":"<p>Compute</p>  \\lim_{x\\to1+} \\frac{1-x^2}{x^2 -2x +1}"},{"location":"demo/#q2","title":"Q2","text":"<p>Compute the value a such that  f is continuous everywhere: </p>  f(t) =  \\begin{cases}     \\frac{\\sqrt{4+t^2} - 2}{t^2} &amp; t=0\\\\     a &amp; t \\neq 0 \\end{cases}"},{"location":"demo/#q3","title":"Q3","text":"<p>Compute the derivative of </p>  \\frac{\\sin x + x}{2 + \\cos x}"},{"location":"demo/#lecture-notes","title":"Lecture Notes","text":""},{"location":"demo/#derivative-formulas","title":"Derivative Formulas","text":"<p>Proof of (u+v)' = u' + v'</p> <p>Start by using the definition of the derivatives</p> \\begin{align*}     (u+v)'(x) &amp;= \\lim_{\\Delta x \\to 0} \\frac{(u+v)(x+\\Delta x) - (u+v)(x)}{\\Delta x} \\\\     &amp;= \\lim_{\\Delta x \\to 0} \\frac{u(x+\\Delta x)+v(x+\\Delta x) - u(x) - v(x)}{\\Delta x} \\\\     &amp;= \\lim_{\\Delta x \\to 0} \\Biggl \\{ \\frac{u(x+\\Delta x) -u(x)}{\\Delta x} + \\frac{v(x+\\Delta x) - v(x)}{\\Delta x} \\Biggr \\} \\\\     &amp;= u'(x) + v'(x)  \\; \\; \\; \\blacksquare \\end{align*} <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>This </p> <p>Lorem ipsum dolo sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>This is highlighted text.</p> <p>{     \"data\": {\"url\": \"https://raw.githubusercontent.com/fadni/data/main/gradesonly.csv\"},     \"mark\": {\"type\":\"bar\", \"tooltip\":true},     \"encoding\": {         \"x\": {             \"field\": \"Letter grade\", \"type\": \"nominal\",              \"sort\": [\"A+\", \"A\", \"B+\", \"B\", \"C\", \"D\", \"F\", \"ABS\"]         },         \"y\": {\"aggregate\": \"count\"},         \"color\": {\"field\": \"Letter grade\"}     } }</p> <p>{   \"description\": \"A simple bar chart with embedded data.\",   \"data\": {     \"values\": [       {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},       {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},       {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}     ]   },   \"mark\": {\"type\": \"bar\", \"tooltip\": true},   \"encoding\": {     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}   } }</p>"},{"location":"courses/C2013/","title":"Programming Fundamentals (2)","text":""},{"location":"courses/C2013/#course-summary","title":"Course summary","text":"<p>This is the second part of programming fundamentals, a continuation of C1023 using C++ as the programming language. Principles of object oriented design including encapsulation, inheritance, polymorphism and the use of abstract classes will be introduced. Language features will also include pointers, dynamic memory allocation, operator overloading, some system calls and templates.</p>"},{"location":"courses/C2013/#textbooks-and-printed-resouces","title":"Textbooks and printed resouces","text":"<p> Absolute C++, Walter Savitch, Kenrick Mock, Addison Wesley 2012, 5th Edition</p>"},{"location":"courses/C2013/#prerequisites","title":"Prerequisites","text":"<ul> <li>C1023</li> </ul>"},{"location":"courses/C2013/#grading","title":"Grading","text":"Activity Weight Assignments 20% Labs 30% Midterm 10% Final Exam 40%"},{"location":"courses/C2013/lectures/lec1/","title":"Lecture 1: Review","text":""},{"location":"courses/C2013/lectures/lec1/#overview-of-programming","title":"Overview of Programming","text":"<p>We start this review with a quote from very famous computer scientist:</p> <p>Programming is learned by writing programs</p> <p>Brian Kernighan</p> <p>Indeed! If you want to be professional in programming, then you must spend a lot of time (really a lot of time) writing several programs in front of a PC/laptop. Writing codes in a paper is not sufficient. You must write and run your programs. The purpose is to get familiar with programming environment and give you a feel of how you can get a computer to do things for you.</p> <p>Programming</p> <p>Programming is the activity of writing and testing programs</p> <p>The figure below shows a very basic view of the program development process. Generally, programming involves two activities: writing and testing. After designing your algorithm, you go through the following steps:</p> <pre><code>flowchart LR\n    S1[Edit] --&gt; S2[Compile] --&gt; C1{error?} -- No --&gt; S3[Run a test] --&gt; C2{Pass?} -- Yes --&gt; C3{Another test?} -- No --&gt; F(Done)\n    C1 -- Yes --&gt; S1\n    C2 -- No --&gt; S1\n    C3 -- Yes --&gt; S3</code></pre> <ol> <li>Edit your program and save it in a source file,</li> <li>Compile the source file to find any syntax error; if there is one, you return back to Step (1) to fix it. The compiler will emit an error message to guide you on how to fix the error. If the source file has compiled successfully, an executable file would be generated.</li> <li>Prepare a list of test cases to cover all execution paths to examine the logic of your algorithm.</li> <li>Pick one test case and run your program. If your program outputs unexpected result (i.e., the test case is failed and this indicates a logical error), then you need to go back to Step (1). Sometimes, you may need to return back to the very beginning and revise your algorithm.</li> <li>If your program passed all test cases, then you are done.</li> </ol>"},{"location":"courses/C2013/lectures/lec1/#debugging-and-ide","title":"Debugging and IDE","text":"<p>You, as a programmer, must test your program thoroughly, comparing the expected results to those that actually occur. When defects are found, they must be traced back to the source of the problem in the code/algorithm and corrected. The process of finding and correcting defects in a program is called debugging. Logical errors can manifest themselves in many ways, and the actual root cause might be difficult to discover.</p> <p>A software development environment is a set of tools used to create, compile, run, test, and modify a program. Some environments are referred to as integrated development environment (IDE) because they integrate various tools into one software program and provide a convenient graphical user interface (GUI). Most IDEs are shipped with a debugger tool, which helps you to debug your programs. You must be familiar with this tool.</p>"},{"location":"courses/C2013/lectures/lec1/#semantics","title":"Semantics","text":"<p>One final remark before proceeding to the next section is that writing and debugging require you to be fully aware of statements\u2019 semantics.</p> <p>Semantics of a statement</p> <p>The semantics of a statement in a programming language define what will happen when that statement is executed</p> <p>Programming languages are generally unambiguous, which means the semantics of a program are well defined. That is, there is one and only one interpretation for each statement. For example:</p> Example<pre><code>    int length ; // define a variable of type int\n    length = 99; // What is the semantics of this statement? (1)\n</code></pre> <ol> <li>Put 99 to the object named by <code>length</code>.</li> </ol> <p>Here, as the left\u2013hand operand of the assignment, <code>length</code> means \"the object named <code>length</code>,\" so that the assignment statement is read \"Put 99 into the object named by <code>length</code>.\"</p>"},{"location":"courses/C2013/lectures/lec1/#c-program-structure","title":"C++ Program Structure","text":"A typical C++ program<pre><code>// this program outputs the message \" Hello World !\" to the monitor\n# include &lt;iostream&gt;\n\nusing namespace std;\n\n// MAIN function\nint main ()\n{\n    cout &lt;&lt; \" Hello World !\" &lt;&lt; endl ;\n\n    return 0;\n}\n</code></pre> <p>Exercises</p> QuestionsAnswer <ol> <li>Why are the following not comments? <pre><code>(a) /*/\n(b) /* comment? * /\n(c) // Is this\n    a comment?\n</code></pre></li> <li>What is the difference between: <pre><code>(a) #include &lt;iostream&gt;\n(b) #include &lt;iostream.h&gt;\n</code></pre></li> <li>What is the difference between: <pre><code>(a) #include &lt;string.h&gt;\n(b) #include &lt;cstring&gt;\n(c) #include &lt;string&gt;\n</code></pre></li> <li>Correct the following code without using the keywords <code>using</code> and <code>namespace</code>: <pre><code>#include &lt;iostream&gt;\nint main()\n{\n    cout &gt;&gt; \"Hello World!\" &gt;&gt; endl;\n\n    return 0;\n}\n</code></pre></li> </ol> <ol> <li> <p>(a) It should be either <code>//</code> or <code>/* */</code>. (b) There should be no space between <code>*</code> and <code>/</code> at the end. (c) <code>//</code> is a line comment. So, the second line should also begin with <code>//</code></p> </li> <li> <p>No difference. <code>&lt;iostream.h&gt;</code> is an older header file corresponding to the new header file <code>&lt;iostream&gt;</code>.</p> </li> <li> <p>(a) This is the old header name for <code>&lt;cstring&gt;</code>.      (b) This is to include C-style string library.      (c) This is to include C++ string library.</p> </li> <li>The corrected code is:     <pre><code>#include &lt;iostream&gt;\nint main()\n{\n    std.cout &gt;&gt; \"Hello World!\" &gt;&gt; std.endl;\n\n    return 0;\n}\n</code></pre></li> </ol>"},{"location":"courses/C2013/lectures/lec1/#data-types-and-expressions","title":"Data Types and Expressions","text":"<p>Recall the following. It is important to understand and remember each definition</p> <p>Definitions</p> <ul> <li>A type defines a set of possible values and a set of operations defined on them.</li> <li>An object is some memory that holds a value.</li> <li>A value is a set of bits in memory interpreted according to a type.</li> <li>A variable is a named object.</li> <li>A declaration is a statement that gives a name to an object along with a type.</li> <li>A definition is a declaration that sets aside memory for an object.</li> </ul>"},{"location":"courses/C2013/lectures/lec1/#examples","title":"Examples","text":"<p>What is the semantics of:</p> <p><pre><code>int length = 99;\n</code></pre>  This is a definition:</p> <ol> <li>It creates a new object by allocating four-byte memory. (1)</li> <li>The new object will be named <code>length</code>.</li> <li>The data type of <code>length</code> is <code>int</code>.</li> <li>The object will be initialized with the value of 99.</li> </ol> <ol> <li>I am assuming the size of <code>int</code> is 4 bytes</li> </ol> <p>Be aware of the highlighted text above. The object will be initialized, not assigned.</p> <p>What is the semantics of:</p> <p><pre><code>length = 99;\n</code></pre> This is an assignment statement. It means to put/assign the value 99 into/to the object named by <code>length</code>.</p> <p>What is the semantics of:</p> <p><pre><code>int &amp;side = length;\n</code></pre>  Semantically, this is a declaration statement. It means as follows. The object named by <code>length</code> has a new (another) name, which is <code>side</code>, as shown: </p>"},{"location":"courses/C2013/lectures/lec1/#data-types","title":"Data Types","text":"<ol> <li>Built-in data types:<ol> <li>Ordinal types: <code>int</code>, <code>char</code>.</li> <li>Boolean type: <code>bool</code>.</li> <li>Floating-point types: <code>float</code>, <code>double</code>.</li> <li>String type: <code>string</code></li> </ol> </li> <li>Type modifiers:<ol> <li>Sign modifiers (for ordinal types): <code>signed</code>, <code>unsigned</code>.</li> <li>Size modifiers: <code>short</code>, <code>long</code>, <code>long long</code>.</li> <li>Storage modifiers: <code>static</code>, <code>const</code>, <code>auto</code></li> </ol> </li> <li>Type specifier: <code>auto</code></li> </ol>"},{"location":"courses/C2013/lectures/lec1/#constants-and-literals","title":"Constants and Literals","text":"<ol> <li>Integer constants: <code>3</code>, <code>-40</code>, <code>'a'</code>, <code>'B'</code>, <code>'+'</code>, <code>023</code>, <code>0xFA</code></li> <li>Floating-point constants: <code>1.2</code>, <code>2.001</code>, <code>-0.0234</code>, <code>9e-5</code>, <code>-2.34E3</code></li> <li>Boolean constants: <code>true</code>, <code>false</code>.</li> <li>Recall that literals are named constant<ol> <li>Example (1): <code>const int LENSIZE = 10;</code> Here <code>LENSIZE</code> is a constant integer with value <code>10</code>.</li> <li>Example (2): <code>constexpr double PI = 3.14159;</code></li> </ol> </li> </ol>"},{"location":"courses/C2013/lectures/lec1/#expressions","title":"Expressions","text":"<p>An expression can be:</p> <ol> <li>an arithmetic operation</li> <li>a logical operation that evaluates to TRUE or FALSE</li> <li>a function call</li> <li>A constant</li> </ol>"},{"location":"courses/CS404/","title":"Assembly Language","text":""},{"location":"courses/CS404/#course-summary","title":"Course summary","text":""},{"location":"courses/CS404/#textbooks-and-printed-resouces","title":"Textbooks and printed resouces","text":""},{"location":"courses/CS404/#prerequisites","title":"Prerequisites","text":"<ul> <li>C2023</li> </ul>"},{"location":"courses/CS404/#grading","title":"Grading","text":"Activity Weight Assignments 20% Labs 30% Midterm 10% Final Exam 40%"},{"location":"courses/CS404/lectures/lec1/","title":"Introduction","text":""},{"location":"courses/CS404/lectures/lec1/#part-1","title":"Part 1","text":""},{"location":"courses/CS404/lectures/lec1/#part-2","title":"Part 2","text":""},{"location":"courses/CS404/lectures/lec1/#exercises","title":"Exercises","text":""}]}